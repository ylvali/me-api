var cov_wyzd254yr=function(){var path="/mnt/c/Users/ylva/dbwebbkurser/jsramverk/2023version/yso/appBTHv2/backendBTH/app.js";var hash="f71f37b407e9d8e4f5e0dd3cb7da604bf913a64b";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/mnt/c/Users/ylva/dbwebbkurser/jsramverk/2023version/yso/appBTHv2/backendBTH/app.js",statementMap:{"0":{start:{line:5,column:16},end:{line:5,column:34}},"1":{start:{line:8,column:15},end:{line:8,column:32}},"2":{start:{line:12,column:13},end:{line:12,column:28}},"3":{start:{line:15,column:19},end:{line:15,column:41}},"4":{start:{line:18,column:12},end:{line:18,column:21}},"5":{start:{line:19,column:13},end:{line:19,column:17}},"6":{start:{line:21,column:0},end:{line:21,column:27}},"7":{start:{line:22,column:0},end:{line:22,column:51}},"8":{start:{line:28,column:11},end:{line:28,column:36}},"9":{start:{line:31,column:0},end:{line:31,column:16}},"10":{start:{line:35,column:0},end:{line:35,column:27}},"11":{start:{line:36,column:0},end:{line:36,column:51}},"12":{start:{line:39,column:0},end:{line:42,column:1}},"13":{start:{line:41,column:4},end:{line:41,column:32}},"14":{start:{line:46,column:0},end:{line:50,column:3}},"15":{start:{line:47,column:4},end:{line:47,column:28}},"16":{start:{line:48,column:4},end:{line:48,column:26}},"17":{start:{line:49,column:4},end:{line:49,column:11}},"18":{start:{line:59,column:13},end:{line:59,column:36}},"19":{start:{line:60,column:17},end:{line:60,column:46}},"20":{start:{line:63,column:15},end:{line:63,column:37}},"21":{start:{line:73,column:14},end:{line:73,column:39}},"22":{start:{line:74,column:14},end:{line:74,column:39}},"23":{start:{line:75,column:15},end:{line:75,column:42}},"24":{start:{line:76,column:16},end:{line:76,column:44}},"25":{start:{line:78,column:0},end:{line:78,column:20}},"26":{start:{line:79,column:0},end:{line:79,column:25}},"27":{start:{line:80,column:0},end:{line:80,column:29}},"28":{start:{line:81,column:0},end:{line:81,column:28}},"29":{start:{line:85,column:0},end:{line:95,column:3}},"30":{start:{line:86,column:4},end:{line:86,column:58}},"31":{start:{line:87,column:4},end:{line:87,column:33}},"32":{start:{line:89,column:4},end:{line:94,column:7}},"33":{start:{line:98,column:0},end:{line:116,column:3}},"34":{start:{line:100,column:19},end:{line:100,column:32}},"35":{start:{line:101,column:16},end:{line:101,column:45}},"36":{start:{line:102,column:4},end:{line:109,column:7}},"37":{start:{line:103,column:8},end:{line:107,column:9}},"38":{start:{line:105,column:12},end:{line:105,column:39}},"39":{start:{line:106,column:12},end:{line:106,column:41}},"40":{start:{line:108,column:8},end:{line:108,column:35}},"41":{start:{line:111,column:4},end:{line:115,column:7}},"42":{start:{line:125,column:0},end:{line:132,column:3}},"43":{start:{line:126,column:17},end:{line:130,column:5}},"44":{start:{line:131,column:4},end:{line:131,column:19}},"45":{start:{line:138,column:0},end:{line:142,column:3}},"46":{start:{line:139,column:14},end:{line:139,column:36}},"47":{start:{line:140,column:4},end:{line:140,column:21}},"48":{start:{line:141,column:4},end:{line:141,column:14}},"49":{start:{line:144,column:0},end:{line:158,column:3}},"50":{start:{line:145,column:4},end:{line:147,column:5}},"51":{start:{line:146,column:8},end:{line:146,column:25}},"52":{start:{line:149,column:4},end:{line:157,column:7}},"53":{start:{line:165,column:15},end:{line:165,column:92}},"54":{start:{line:165,column:38},end:{line:165,column:91}},"55":{start:{line:167,column:0},end:{line:167,column:24}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:46,column:8},end:{line:46,column:9}},loc:{start:{line:46,column:28},end:{line:50,column:1}},line:46},"1":{name:"(anonymous_1)",decl:{start:{line:85,column:18},end:{line:85,column:19}},loc:{start:{line:85,column:32},end:{line:95,column:1}},line:85},"2":{name:"(anonymous_2)",decl:{start:{line:98,column:25},end:{line:98,column:26}},loc:{start:{line:98,column:39},end:{line:116,column:1}},line:98},"3":{name:"(anonymous_3)",decl:{start:{line:102,column:46},end:{line:102,column:47}},loc:{start:{line:102,column:69},end:{line:109,column:5}},line:102},"4":{name:"(anonymous_4)",decl:{start:{line:125,column:23},end:{line:125,column:24}},loc:{start:{line:125,column:37},end:{line:132,column:1}},line:125},"5":{name:"(anonymous_5)",decl:{start:{line:138,column:8},end:{line:138,column:9}},loc:{start:{line:138,column:28},end:{line:142,column:1}},line:138},"6":{name:"(anonymous_6)",decl:{start:{line:144,column:8},end:{line:144,column:9}},loc:{start:{line:144,column:33},end:{line:158,column:1}},line:144},"7":{name:"(anonymous_7)",decl:{start:{line:165,column:32},end:{line:165,column:33}},loc:{start:{line:165,column:38},end:{line:165,column:91}},line:165}},branchMap:{"0":{loc:{start:{line:39,column:0},end:{line:42,column:1}},type:"if",locations:[{start:{line:39,column:0},end:{line:42,column:1}},{start:{line:39,column:0},end:{line:42,column:1}}],line:39},"1":{loc:{start:{line:103,column:8},end:{line:107,column:9}},type:"if",locations:[{start:{line:103,column:8},end:{line:107,column:9}},{start:{line:103,column:8},end:{line:107,column:9}}],line:103},"2":{loc:{start:{line:145,column:4},end:{line:147,column:5}},type:"if",locations:[{start:{line:145,column:4},end:{line:147,column:5}},{start:{line:145,column:4},end:{line:147,column:5}}],line:145},"3":{loc:{start:{line:149,column:15},end:{line:149,column:32}},type:"binary-expr",locations:[{start:{line:149,column:15},end:{line:149,column:25}},{start:{line:149,column:29},end:{line:149,column:32}}],line:149}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0]},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184",hash:"f71f37b407e9d8e4f5e0dd3cb7da604bf913a64b"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}return coverage[path]=coverageData;}();/*jshint esversion: 6 */ // Express app 
const express=(cov_wyzd254yr.s[0]++,require("express"));// MORGAN for inloggning
const morgan=(cov_wyzd254yr.s[1]++,require('morgan'));// Cross-Origin Resource Sharing (CORS)
// 3e parts modul för att andra domäner ska kunna hämta info ifrån våran app
const cors=(cov_wyzd254yr.s[2]++,require('cors'));// Parse the extra params with PUT/POST/DELETE
const bodyParser=(cov_wyzd254yr.s[3]++,require("body-parser"));// Express app
const app=(cov_wyzd254yr.s[4]++,express());const port=(cov_wyzd254yr.s[5]++,8333);//console.log('Running on port' +port);
cov_wyzd254yr.s[6]++;app.use(bodyParser.json());// for parsing application/json
cov_wyzd254yr.s[7]++;app.use(bodyParser.urlencoded({extended:true}));// for parsing application/x-www-form-urlencoded
// Use sqlite database & run it
// const sqlite3 = require('sqlite3').verbose();
// const db = new sqlite3.Database('./db/texts.sqlite');
// Use a testdb if in test mode 
const db=(cov_wyzd254yr.s[8]++,require("db/database.js"));// Use cors
cov_wyzd254yr.s[9]++;app.use(cors());// Enable to send req.body (request body) med POST
// till exempel via Postman
cov_wyzd254yr.s[10]++;app.use(bodyParser.json());// for parsing application/json
cov_wyzd254yr.s[11]++;app.use(bodyParser.urlencoded({extended:true}));// for parsing application/x-www-form-urlencoded
// don't show the log when it is test
cov_wyzd254yr.s[12]++;if(process.env.NODE_ENV!=='test'){cov_wyzd254yr.b[0][0]++;cov_wyzd254yr.s[13]++;// use morgan to log at command line
app.use(morgan('combined'));// 'combined' outputs the Apache style LOGs
}else{cov_wyzd254yr.b[0][1]++;}// This is middleware called for all routes.
// Middleware takes three parameters.
cov_wyzd254yr.s[14]++;app.use((req,res,next)=>{cov_wyzd254yr.f[0]++;cov_wyzd254yr.s[15]++;console.log(req.method);cov_wyzd254yr.s[16]++;console.log(req.path);cov_wyzd254yr.s[17]++;next();});// Json webtokens 
// A secure way of using tokens for login etc. 
// Using an environmental variable
// JWT secret set in the environment : server & process 
// (Change longsecret to something of many characters & difficult)
// $export JWT_SECRET='R_[/_&g2Upsl5I3]uQ]K<2o|J' // run this in the terminal where the app is run
const jwt=(cov_wyzd254yr.s[18]++,require('jsonwebtoken'));const payload=(cov_wyzd254yr.s[19]++,{email:"user@example.com"});// JWT secret set in the script 
const secret=(cov_wyzd254yr.s[20]++,process.env.JWT_SECRET);// using the secret token on your server & local environment
// Create the token sign 
// The token is created in the method below
var token;// ROUTES
// Add a route
// Require routes - routes that are stored in a catalog/directory
// Use the main name with a subcatalog
const index=(cov_wyzd254yr.s[21]++,require('./routes/index'));const hello=(cov_wyzd254yr.s[22]++,require('./routes/hello'));const reports=(cov_wyzd254yr.s[23]++,require('./routes/reports'));const registry=(cov_wyzd254yr.s[24]++,require('./routes/registry'));cov_wyzd254yr.s[25]++;app.use('/',index);cov_wyzd254yr.s[26]++;app.use('/hello',hello);cov_wyzd254yr.s[27]++;app.use('/reports',reports);cov_wyzd254yr.s[28]++;app.use('/users',registry);// Get new token
cov_wyzd254yr.s[29]++;app.get("/token",(req,res)=>{cov_wyzd254yr.f[1]++;cov_wyzd254yr.s[30]++;token=jwt.sign(payload,secret,{expiresIn:'1h'});// here is your token
cov_wyzd254yr.s[31]++;console.log('Token: '+token);cov_wyzd254yr.s[32]++;res.json({data:{msg:"Token: "+token,token:token}});});// Verify token
cov_wyzd254yr.s[33]++;app.post("/verifyToken",(req,res)=>{cov_wyzd254yr.f[2]++;// Control that the token functions
var response=(cov_wyzd254yr.s[34]++,'valid token');var token=(cov_wyzd254yr.s[35]++,req.headers['x-access-token']);cov_wyzd254yr.s[36]++;jwt.verify(token,process.env.JWT_SECRET,function(err,decoded){cov_wyzd254yr.f[3]++;cov_wyzd254yr.s[37]++;if(err){cov_wyzd254yr.b[1][0]++;cov_wyzd254yr.s[38]++;// not a valid token
response='invalid token';cov_wyzd254yr.s[39]++;console.log('Invalid token');}else{cov_wyzd254yr.b[1][1]++;}cov_wyzd254yr.s[40]++;console.log('Valid token');});cov_wyzd254yr.s[41]++;res.json({data:{msg:"Token: "+response}});});// Test put & a status
// app.put("/test", (req, res) => {
//     res.status(204).send();
// });
// Test a message
cov_wyzd254yr.s[42]++;app.get("/hello/:msg",(req,res)=>{cov_wyzd254yr.f[4]++;const data=(cov_wyzd254yr.s[43]++,{data:{msg:req.params.msg}});cov_wyzd254yr.s[44]++;res.json(data);});// Add routes for 404 and error handling
// Catch 404 and forward to error handler
// Put this last
cov_wyzd254yr.s[45]++;app.use((req,res,next)=>{cov_wyzd254yr.f[5]++;var err=(cov_wyzd254yr.s[46]++,new Error("Not Found"));cov_wyzd254yr.s[47]++;err.status=404;cov_wyzd254yr.s[48]++;next(err);});cov_wyzd254yr.s[49]++;app.use((err,req,res,next)=>{cov_wyzd254yr.f[6]++;cov_wyzd254yr.s[50]++;if(res.headersSent){cov_wyzd254yr.b[2][0]++;cov_wyzd254yr.s[51]++;return next(err);}else{cov_wyzd254yr.b[2][1]++;}cov_wyzd254yr.s[52]++;res.status((cov_wyzd254yr.b[3][0]++,err.status)||(cov_wyzd254yr.b[3][1]++,500)).json({"errors":[{"status":err.status,"title":err.message,"detail":err.message}]});});// Start up server
//app.listen(port, () => console.log(`Example API listening on port ${port}!`));
// To import server into the test files & call the server 
// testfiles: test/reports/report_integration.js
const server=(cov_wyzd254yr.s[53]++,app.listen(port,()=>{cov_wyzd254yr.f[7]++;cov_wyzd254yr.s[54]++;return console.log(`Example app listening on port ${port}!`);}));cov_wyzd254yr.s[55]++;module.exports=server;